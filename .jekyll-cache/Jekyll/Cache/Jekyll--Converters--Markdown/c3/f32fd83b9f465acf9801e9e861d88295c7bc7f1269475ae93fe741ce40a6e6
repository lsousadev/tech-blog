I"‘!<!--ðŸ”´ ðŸŸ  âš« âšª ðŸŸ£ ðŸŸ¢ ðŸŸ¡ ðŸ”µ-->

<p>There are many articles on how to host a static website using S3. Many more explain how to enable <em>https</em>, and plenty of them lay out how to use your own domain to host them. AWSâ€™ documentation alone covers all of it. In fact, the base for this article is in the documentation <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/website-hosting-custom-domain-walkthrough.html">pages</a>.</p>

<p>What makes this article worth writing (and hopefully reading) is the attention to the rationale behind every step, from bucket configuration to A record creation. The idea is to learn concepts rather than to practice following steps. Details on what buttons to click and where to find them can be found on the documentation.</p>

<p><strong>Disclaimer</strong>: some steps can or will incur costs. Many of the steps are optional in hosting a website, such as logging, having a custom domain, or using a CDN.</p>

<h2 id="01-register-custom-domain">01. Register custom domain</h2>

<p>Route 53 offers both domain registration and DNS hosting services. Domain registration means you pay (usually a yearly fee) for the domain name, eg. <em>domain-name.com</em>. AWS will use a partner registrar to register your information as the owner of that domain. The other thing it will do is keep track of the authoritative name servers for that domain, ie. the servers known to be in charge of knowing what IP to translate your domain name to.</p>

<p>That is where their DNS hosting service comes in. For a monthly fee, Route 53 provides you with servers that you can select to be your domainâ€™s authoritative name servers. Usually those will be automatically generated by Route 53 and configured into your domain registration. Theyâ€™re called <em>Hosted Zones</em> and come in sets of four servers.</p>

<h2 id="02-create-and-validate-certificate">02. Create and validate certificate</h2>

<p>You can do this step with the AWS Certificate Manager (ACM) service. When you create your certificate, it is a good idea to add both your apex domain name and a wildcard for all subdomains, eg. <em>mydomain.com</em> and <em>*.mydomain.com</em>, so that all your pages are covered by the certificate. The certificate is nothing more than proof that the person who owns the domain is providing the content. In order to earn the requested certificate from the certificate authority (CA), you need to prove that you control the domain in question.</p>

<p>The way to do that with ACM is easy: they provide you a subdomain name (eg. <em>_e7a8d1a9c01ec67ee57e0941f2b43a39</em>) and an AWS page that the subdomain should point to (eg. <em>_e87d0bf50c515881ed3a703a6216e409.wrnxprcrrv.acm-validations.aws.</em>) for each domain name in the certificate, which usually are the apex and the wildcard names mentioned above. All that is needed is to create the equivalent CNAME records. ACM has a button that automatically does the record creation. Within seconds, your certificate should be issued and ready to be used.</p>

<h2 id="03-create-and-configure-hosting-bucket">03. Create and configure hosting bucket</h2>

<p>It is strongly encouraged that the hosting bucket have the same name as the domain, specially if youâ€™re not using CloudFront. The reason for that is that S3 buckets donâ€™t have unique IP addresses. Their IP isnâ€™t even static. It just uses an IP from a vast pool of AWS IP addresses. Therefore, when a request is made to a bucket, it arrives to one of the many public AWS IP addresses, and a <code class="language-plaintext highlighter-rouge">host</code> header (the domain name in the URL) is extracted, and AWS uses that value to locate the bucket. There is no extra logic behind that. So if AWS fields a request to a bucket website addressed to <em>jenkins.mydomain.com/status</em>, it will look for bucket <em>jenkins.mydomain.com</em>. If the request is for <em>my-example.s3-website.us-east-1.amazonaws.com/</em>, it will look for bucket <em>my-example</em>.</p>

<p>On the other hand, using CloudFront would work because it rewrites the <code class="language-plaintext highlighter-rouge">host</code> header. The CloudFront distribution has an <em>origins</em> setting where the bucket, ELB, or website serving the content can be listed. Another workaround to mismatching bucket and domain names is to set up a same-region EC2 reverse proxy. One workaround that does not work is to create a CNAME record from <em>mydomain.com</em> to <em>my-example.s3-website.us-east-1.amazonaws.com/</em>. The <em>mydomain.com</em> header is kept in the request through redirections, so when the request arrives to AWS for the server responsible for <em>my-example.s3-website.us-east-1.amazonaws.com/</em>, it wonâ€™t serve anything because it doesnâ€™t have anything to serve for requests to <em>mydomain.com</em>.</p>

<p><strong>Important</strong>: when using CloudFront, website users contact the CDN and the CDN contacts the bucket for the files, so the bucket should block all public access. CloudFront has a feature called <em>origin access identities</em> that can be created and referred to in the bucket policy to give the service read access. If CloudFront is not being used, then public access needs to be allowed in the bucket permissions.</p>

<h2 id="04-create-and-configure-logging-bucket">04. Create and configure logging bucket</h2>

<p>The bucket should be in the same region as the hosting bucket for cost reasons. The main detail for this step is the permission configuration. By default, only the account owner can write to the bucket, so object-level ACLs are disabled. CloudFront can add a bucket policy entry to give itself permission to write logs, but you must manually enable ACLs for it to work.</p>

<h2 id="05-add-content-to-hosting-bucket">05. Add content to hosting bucket</h2>

<p>This part is highly depends on personal preferences and objectives. You can add a personal project using CSS and Javascript, you can add a whole <a href="https://jekyllrb.com/">Jekyll</a> blog, or you can simply add an index.html page for testing.</p>

<p>If youâ€™re going the Jekyll route, or any other route where you manipulate your links, be very wary. In my case, changing the <code class="language-plaintext highlighter-rouge">permalink</code> of pages caused all requested pages other than the root page to not be found. But the worst part was that I did not get a <em>Page Not Found</em> error. Instead, I got an <em>Access Denied</em> error, making it much harder to find the problem. To summarize, I had to create a CloudFront Function that added <code class="language-plaintext highlighter-rouge">index.html</code> to all requests that ended with a <code class="language-plaintext highlighter-rouge">/</code>. You can read more about that <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/example-function-add-index.html">here</a>.</p>

<h2 id="06-create-and-configure-cdn-distribution">06. Create and configure CDN distribution</h2>

<p>By default, CloudFront only knows how to serve requests to its domain name, which should be something like <em><code class="language-plaintext highlighter-rouge">https://xxxxxxxxxxxxxx.cloudfront.net</code></em>. In order to let it know it is okay to serve requests that are originally sent to your custom domain (<em>mydomain.com</em>). Step 3 dives a bit deeper on this topic. Step 7 will not work if your alternate domain names are not properly set.</p>

<p>This step is where the certificate created in step 2 comes into play as well. You can cover your alternate domain names with your SSL certificate so that you can redirect all requests to HTTPS.</p>

<p>A quick note on origin domain: it is best practice to use the domain name version that includes the region of your bucket. The global domain of the bucket works for most regions, but not all.</p>

<h2 id="07-create-alias-records">07. Create alias records</h2>

<p>If you followed the previous steps correctly, this step should be simple. Go to the hosted zone of your custom domain and create an alias A record to your CloudFront distribution. If your CloudFront distribution doesnâ€™t show up as an option when you create the record via Route 53, chances are that you did not properly configure your distributionâ€™s alternate domain names to use your custom domain name. Due to reasons touched upon on steps 3 and 6, Route 53 is configured to not allow the creation of aliases to CloudFront distributions that do not have the domain (or subdomain) as an alternate domain name.</p>
:ET