I"2<!--ðŸ”´ ðŸŸ  âš« âšª ðŸŸ£ ðŸŸ¢ ðŸŸ¡ ðŸ”µ-->

<h2 id="nslookup-testblobcorewindowsnet-from-a-vm-in-a-vnet"><code class="language-plaintext highlighter-rouge">nslookup test.blob.core.windows.net</code> from a VM in a VNet</h2>

<ul>
  <li>without any integration:
    <ul>
      <li>âšª test.blob.core.windows.net -&gt; CNAME -&gt; ðŸ”µ blob.a1b2c3.store.core.windows.net</li>
      <li>ðŸ”µ blob.a1b2c3.store.core.windows.net -&gt; A record -&gt; ðŸ”´ 52.240.48.36 (public IP)</li>
    </ul>
  </li>
  <li>with PrivateLink:
    <ul>
      <li>âšª test.blob.core.windows.net -&gt; CNAME -&gt; ðŸŸ¡ test.privatelink.blob.core.windows.net</li>
      <li>ðŸŸ¡ test.privatelink.blob.core.windows.net -&gt; CNAME -&gt; ðŸ”µ blob.a1b2c3.store.core.windows.net</li>
      <li>ðŸ”µ blob.a1b2c3.store.core.windows.net -&gt; A record -&gt; ðŸ”´ 52.240.48.36 (public IP)</li>
    </ul>
  </li>
  <li>with PrivateLink and Private Endpoint:
    <ul>
      <li>âšª test.blob.core.windows.net -&gt; CNAME -&gt; ðŸŸ¡ test.privatelink.blob.core.windows.net</li>
      <li>ðŸŸ¡ test.privatelink.blob.core.windows.net -&gt; A record (Azure Private DNS) -&gt; ðŸŸ¢ 10.0.1.4</li>
    </ul>
  </li>
</ul>

<h2 id="dns-configuration">DNS Configuration</h2>

<ul>
  <li>The VNet uses Azure DNS by default.</li>
  <li>NICâ€™s inside a VNet use the VNet DNS configuration by default.</li>
  <li>An internal DNS private zone called IDNS is created automatically inside every VNet.
    <ul>
      <li>Any NIC added to the VNet gets registered within IDNS</li>
      <li>The domain name for the private zone is <code class="language-plaintext highlighter-rouge">internal.cloudapp.net</code></li>
    </ul>
  </li>
</ul>

<h2 id="private-dns-zone">Private DNS Zone</h2>

<ul>
  <li>Can hold any time of record for any name. Full-range.</li>
  <li>Exists outside of VNets (global resource) and can be attached to them.</li>
  <li>Private DNS zones can be used solely for DNS resolution or for registration:
    <ul>
      <li>Like IDNS, all NICâ€™s added to the VNet gets registered within the private zone.</li>
      <li>A VNet can only connect to one private zone for registration.</li>
      <li>A private DNS zone can connect to 100 VNets for registration and 1000 for resolution.</li>
    </ul>
  </li>
</ul>

<h2 id="network-security-groups">Network Security Groups</h2>

<ul>
  <li>Can only be attached to a subnet or a network interface (eg. a VM).</li>
  <li>App Security Group: works like a managed tag that can be referenced as source/destination in NSG rules.</li>
</ul>

<h2 id="service-endpoints">Service Endpoints</h2>

<ul>
  <li>Services such as Azure Storage, Key Vault, Cosmos DB, etc offer service endpoint.</li>
  <li>It creates a record in the route table of a subnet listing all the multiple public IP CIDR blocks of an Azure service and redirect them to the VirtualNetworkServiceEndpoint and remains internal to Azure.</li>
  <li>The source IP address will switch from public to private, so the serviceâ€™s firewall rules must reflect that.</li>
</ul>

<h2 id="private-endpoints">Private Endpoints</h2>

<ul>
  <li>Adds a NIC to a subnet with private IP (within the VNet CIDR block) pointing to a storage account and service.</li>
</ul>

<h2 id="the-reason-for-privatelink">The reason for PrivateLink</h2>

<p>From the results above, it may seem that if you have a Private Endpoint, you can bypass PrivateLink and just create an Azure Private DNS that points âšª test.blob.core.windows.net to ðŸŸ¢ 10.0.1.4. It would work, but for that to happen the Private DNS zone would have to be at the <code class="language-plaintext highlighter-rouge">blob.core.windows.net</code>, and youâ€™d then be expected to create a record for each Blob Storage that the VNet attached to the Private DNS zone would like to connect to. For example, if a machine also wanted to connect to <code class="language-plaintext highlighter-rouge">second-test.blob.core.windows.net</code>, it would be directed to resolve with the Private DNS zone, which would need to be manually configured. It is often more sensible to create a Private DNS zone at the <code class="language-plaintext highlighter-rouge">privatelink.blob.core.windows.net</code> level.</p>

<h2 id="on-premises-considerations">On-premises considerations</h2>

<ul>
  <li>Azure Private DNS zones are available globally, you can connect any VNet in the world to it for link resolution, but you cannot connect to it from on-premises.</li>
  <li>You can deploy a DNS forwarder in a VNet, then create a record in the local DNS (on-prem) to point any <code class="language-plaintext highlighter-rouge">privatelink.blob.core.windows.net</code> requests to the DNS forwarder, which can then talk to the Private DNS zone.</li>
  <li>Optionally, the records in the Private DNS zone can be recreated manually on local DNS.</li>
</ul>

<h2 id="privatelink-service">PrivateLink Service</h2>

<ul>
  <li>Useful in cases virtual networks cannot be peered (eg. 3rd party services, CIDR block overlap, etc).</li>
  <li>The host VNet deploys PLS internally in its own subnet. PLS will receive external requests and forward them to a Standard Load Balancer.</li>
  <li>The PLS deployment can have up to 8 IP addresses in the VNet, and it connects to a Front End IP address of the Load Balancer.</li>
</ul>

<h2 id="questions">Questions</h2>

<ul>
  <li>Is the VirtualNetworkServiceEndpoint a NIC with private IP?</li>
  <li>How does a Private Endpoint, which is a NIC with a private IP inside the VNet, talk to a Blob Storage instance without using the internet or Public IP?</li>
  <li>How does a private DNS zone get linked to a VNet? VNetâ€™s route table?</li>
</ul>
:ET