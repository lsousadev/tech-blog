<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-23T11:36:41-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Just Tech Things</title><subtitle>A blog for all things tech that Lucas runs into.</subtitle><author><name>Lucas Sousa</name></author><entry><title type="html">Azure App Service Architecture</title><link href="http://localhost:4000/azure-app-services-architecture/" rel="alternate" type="text/html" title="Azure App Service Architecture" /><published>2022-07-17T00:00:00-07:00</published><updated>2022-07-17T00:00:00-07:00</updated><id>http://localhost:4000/azure-app-services-architecture</id><content type="html" xml:base="http://localhost:4000/azure-app-services-architecture/"><![CDATA[<!--üî¥ üü† ‚ö´ ‚ö™ üü£ üü¢ üü° üîµ-->

<h2 id="app-service-within-azure-architecture">App Service Within Azure Architecture</h2>

<p><img src="/assets/images/azure_antares_architecture.png" alt="Azure - Antares Architecture" /></p>

<ul>
  <li>The architecture for App Service is called Antares.</li>
  <li>The Control Plane API requests start from ARM (Azure Resource Manager) to Antares‚Äô Geomaster.</li>
  <li>The Geomaster is a component that serves as a load balancer keeping track of state of App Service‚Äôs stamps (scale units) around the world and directing API call traffic.</li>
  <li>There are dozens to thousands of stampsin each Azure region.</li>
  <li>Each scale unit, or stamp, consists of ~1000 virtual machines, also called servers or workers.</li>
</ul>

<h2 id="app-service-creation-flow">App Service Creation Flow</h2>

<p><img src="/assets/images/app_service_creation_flow.png" alt="App Service app creation flow" /></p>

<ol>
  <li>User makes a request to create a new site.</li>
  <li>ARM makes sure user has access to the resource to allow the given operation (create in this case) and forwards the requests to App Service Geo-Master.</li>
  <li>Geo-Master finds the best suitable scale unit for the user‚Äôs request and forwards the request.</li>
  <li>The scale unit creates the new application.</li>
  <li>Geo-Master reports success on the create request.</li>
</ol>

<h2 id="stamp-architecture">Stamp Architecture</h2>

<p><img src="/assets/images/app_service_stamp_architecture.png" alt="App Service stamp architecture" /></p>

<ul>
  <li>There are different types of workers inside of a stamp:
    <ul>
      <li><strong>Web workers</strong>: the vast majority of workers in a stamp. It‚Äôs the server that runs the app. They can be shared between clients or dedicated to a single client, depending on the App Service Plan.</li>
      <li><strong>Front end</strong>: a layer 7 (HTTP) load balancer that distributes requests too all web workers allocated for an app. It uses round-robin by default.</li>
      <li><strong>File servers</strong>: worker that mounts to Blob Storage containing data needed to run app (code, images, etc) and exposes it as a network drive, which in turn is mapped by the web worker as a local drive. Any file-relateed r/w operation performed by the app passes through a file server.</li>
      <li><strong>API controller</strong>: performs management operations inside stamp. It is to the Control Plane what the Front end is to the Runtime Plane. Receives API calls and orchestrates the steps to fulfill the requests. Examples:
        <ul>
          <li>When Geo-Master passes an API call to create a new application, the API controller orchestrates the required steps to create the application at the scale unit.</li>
          <li>When you use the Azure portal to reset your application, it‚Äôs the API controller that notifies all Web Workers currently allocated to your application to restart your app.</li>
        </ul>
      </li>
      <li><strong>Azure SQL</strong>: persists app metadata, only accessed by the data role.</li>
      <li><strong>Data role</strong>: a cache layer between the SQL database and all the other workers. Examples:
        <ul>
          <li>Web workers ask Data role for website configuration.</li>
          <li>Front end workers ask Data role for list of workers they can route an app‚Äôs requests to.</li>
        </ul>
      </li>
      <li><strong>Publisher</strong>: exposes FTP functionality for customers to access their application content and logs in the Blob Storages and file servers. It also gives customers another way of deploying apps.</li>
    </ul>
  </li>
</ul>

<h2 id="web-worker-architecture">Web Worker Architecture</h2>

<p><img src="/assets/images/antares_dynamic_prov_control.png" alt="Antares dynamic website provisioning - control flow" /></p>

<ul>
  <li>Basic components:
    <ul>
      <li><strong>HTTP.sys</strong>: receives requests (by matching, as seen above) based on URL and port, then sends it to HTTP Request Queue.</li>
      <li><strong>HTTP Request Queue</strong>: sends requests received via site-specific binding to the site specific HTTP request queue, and sends all other requests to the MiniARR HTTP request queue.</li>
      <li><strong>MiniARR Worker Process</strong>: only receives requests for websites not yet set up. Tells DWAS to create the structure for the website requested.</li>
      <li><strong>DWAS</strong>: receives input from two components:
        <ul>
          <li>From <strong>MiniARR</strong>, triggering a dynamic website provisining. DWAS:
            <ol>
              <li>receives host name from MiniArr and uses it to fetch site config (<code class="language-plaintext highlighter-rouge">StartSiteContext</code>) from DataRole.</li>
              <li>generates <code class="language-plaintext highlighter-rouge">applicationHost.config</code>, <code class="language-plaintext highlighter-rouge">rootweb.config</code>, etc into its temp directory.
                <ul>
                  <li>Both config files are created with ‚Äútransform pipeline‚Äù code, under <code class="language-plaintext highlighter-rouge">Microsoft.Web.Hosting\Utilities\Transformers</code>.</li>
                  <li>The transform pipeline can inject user-specific config settings into the <code class="language-plaintext highlighter-rouge">.config</code> files, such as Virtual Directories, Apps, Handler Mappings (PHP/Python support), etc.</li>
                </ul>
              </li>
              <li>generates low-privileged user identity to run site code.</li>
              <li>creates a local directory for site, and sets up a symlink to the site‚Äôs root directory. (eg. <code class="language-plaintext highlighter-rouge">C:\DWASFiles\Sites\foo\VirtualDir0</code> pointing to <code class="language-plaintext highlighter-rouge">\\FileServerIP1\volume-3-default\&lt;webspaceGuid&gt;\&lt;siteGuid&gt;</code>)</li>
              <li>copies config files from temp to local directory at <code class="language-plaintext highlighter-rouge">config\</code>.</li>
              <li>creates a site-specific binding in HTTP.sys and an HTTP request queue, asking to be notified once queue gets a requests.</li>
              <li>registers with Data Role to receive change notifications to website config.</li>
              <li>sets up rest of state in machine needed to run the site (VNet and MSI integration, cert installation, local cache hydration, etc), based on site config.</li>
            </ol>
          </li>
          <li>From <strong>site-specific HTTP request queue</strong>, triggering DWAS to:
            <ol>
              <li>spin up and initializes a Worker Process (<code class="language-plaintext highlighter-rouge">w3wp.exe</code>) for the site.</li>
              <li>create a sandbox by virtualizing <code class="language-plaintext highlighter-rouge">D:\home</code> which points to the site‚Äôs root directory and only allows access to that SMB path.</li>
            </ol>
          </li>
          <li>From <strong>DataRole</strong> (outside of Web Worker) to change site configuration. DWAS:
            <ol>
              <li>receives a notification from DataRole by long-polling for it.</li>
              <li>fetches new <code class="language-plaintext highlighter-rouge">StartSiteContext</code> from DataRole and compares with previous version.</li>
              <li>overwrites <code class="language-plaintext highlighter-rouge">.config</code> files if there are changes and orchestrates the changes to ensure new config is applied.
                <ul>
                  <li>Overwriting the <code class="language-plaintext highlighter-rouge">.config</code> files causes AppDomain recycles for ASP.NET apps, and can cause child-process recycles for other stacks.</li>
                  <li>Config changes such as an update to app-settings usually require worker process recycle.</li>
                </ul>
              </li>
              <li>gets informed about internal system changes such as movement of storage volumes through long-polling calls to DataRole as well.
                <ul>
                  <li>Change to the site‚Äôs root path requires worker process recycle.</li>
                </ul>
              </li>
            </ol>
          </li>
        </ul>
      </li>
      <li><strong>Worker Process</strong>: sandboxed site-specific worker process that dequeues requests in its corresponding queue, then processes it through a module pipeline, much like in IIS (out of scope for this post).
        <ul>
          <li>Its initialization process is similar to IIS as well, requiring DWAS to guide it through start-up, and then signal when it is ready to start processing requests.</li>
          <li>The process is under a ‚Äújob object‚Äù, which imposes restrictions on the amount of memory and CPU the <code class="language-plaintext highlighter-rouge">w3wp.exe</code> can utilize.</li>
          <li>Again, like IIS, the worker process expects to retrieve config files from the DWAS local directory at <code class="language-plaintext highlighter-rouge">C:\DWASFiles\Sites\foo\config\</code>.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="iis-overview">IIS Overview</h2>

<ul>
  <li>Antares, in its initial version, was more of an IIS-as-a-service.</li>
  <li>IIS‚Äô model for hosting app code:
    <ul>
      <li>Config concepts: sites, bindings, apps, VirtualDirectories, ApplicationPools, handler mappings, etc</li>
      <li>Runtime entities: HTTP(.sys) bindings, HTTP(.sys) request queues, user identities, worker processes (w3wp.exe), etc</li>
    </ul>
  </li>
</ul>

<h2 id="referencee">Referencee</h2>

<ul>
  <li><a href="https://docs.microsoft.com/en-us/archive/msdn-magazine/2017/february/azure-inside-the-azure-app-service-architecture">https://docs.microsoft.com/en-us/archive/msdn-magazine/2017/february/azure-inside-the-azure-app-service-architecture</a></li>
</ul>

<h2 id="questions">Questions</h2>

<ul>
  <li>What is the underlying tech behind the ~1000 VMs per stamp? Are they in physical servers/hosts dedicated to App Service only? How many physical servers?</li>
  <li>What exactly is the sandbox? The <code class="language-plaintext highlighter-rouge">D:\home</code>? Does the worker process get assigned the low-privileged user identity, and what privileges does it have? Seems that the worker process also has access to DWAS local directory.</li>
</ul>]]></content><author><name>Lucas</name></author><category term="app service" /><category term="azure" /><category term="azure" /><category term="cloud" /><category term="vnet" /><category term="app service" /><category term="dns" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Azure Networking for Virtual Networks</title><link href="http://localhost:4000/azure-networking-vnet-dns/" rel="alternate" type="text/html" title="Azure Networking for Virtual Networks" /><published>2022-07-10T00:00:00-07:00</published><updated>2022-07-10T00:00:00-07:00</updated><id>http://localhost:4000/azure-networking-vnet-dns</id><content type="html" xml:base="http://localhost:4000/azure-networking-vnet-dns/"><![CDATA[<!--üî¥ üü† ‚ö´ ‚ö™ üü£ üü¢ üü° üîµ-->

<h2 id="nslookup-testblobcorewindowsnet-from-a-vm-in-a-vnet"><code class="language-plaintext highlighter-rouge">nslookup test.blob.core.windows.net</code> from a VM in a VNet</h2>

<ul>
  <li>without any integration:
    <ul>
      <li>‚ö™ test.blob.core.windows.net -&gt; CNAME -&gt; üîµ blob.a1b2c3.store.core.windows.net</li>
      <li>üîµ blob.a1b2c3.store.core.windows.net -&gt; A record -&gt; üî¥ 52.240.48.36 (public IP)</li>
    </ul>
  </li>
  <li>with PrivateLink:
    <ul>
      <li>‚ö™ test.blob.core.windows.net -&gt; CNAME -&gt; üü° test.privatelink.blob.core.windows.net</li>
      <li>üü° test.privatelink.blob.core.windows.net -&gt; CNAME -&gt; üîµ blob.a1b2c3.store.core.windows.net</li>
      <li>üîµ blob.a1b2c3.store.core.windows.net -&gt; A record -&gt; üî¥ 52.240.48.36 (public IP)</li>
    </ul>
  </li>
  <li>with PrivateLink and Private Endpoint:
    <ul>
      <li>‚ö™ test.blob.core.windows.net -&gt; CNAME -&gt; üü° test.privatelink.blob.core.windows.net</li>
      <li>üü° test.privatelink.blob.core.windows.net -&gt; A record (Azure Private DNS) -&gt; üü¢ 10.0.1.4</li>
    </ul>
  </li>
</ul>

<h2 id="dns-configuration">DNS Configuration</h2>

<ul>
  <li>The VNet uses Azure DNS by default.</li>
  <li>NIC‚Äôs inside a VNet use the VNet DNS configuration by default.</li>
  <li>An internal DNS private zone called IDNS is created automatically inside every VNet.
    <ul>
      <li>Any NIC added to the VNet gets registered within IDNS</li>
      <li>The domain name for the private zone is <code class="language-plaintext highlighter-rouge">internal.cloudapp.net</code></li>
    </ul>
  </li>
</ul>

<h2 id="private-dns-zone">Private DNS Zone</h2>

<ul>
  <li>Can hold any time of record for any name. Full-range.</li>
  <li>Exists outside of VNets (global resource) and can be attached to them.</li>
  <li>Private DNS zones can be used solely for DNS resolution or for registration:
    <ul>
      <li>Like IDNS, all NIC‚Äôs added to the VNet gets registered within the private zone.</li>
      <li>A VNet can only connect to one private zone for registration.</li>
      <li>A private DNS zone can connect to 100 VNets for registration and 1000 for resolution.</li>
    </ul>
  </li>
</ul>

<h2 id="network-security-groups">Network Security Groups</h2>

<ul>
  <li>Can only be attached to a subnet or a network interface (eg. a VM).</li>
  <li>App Security Group: works like a managed tag that can be referenced as source/destination in NSG rules.</li>
</ul>

<h2 id="service-endpoints">Service Endpoints</h2>

<ul>
  <li>Services such as Azure Storage, Key Vault, Cosmos DB, etc offer service endpoint.</li>
  <li>It creates a record in the route table of a subnet listing all the multiple public IP CIDR blocks of an Azure service and redirect them to the VirtualNetworkServiceEndpoint and remains internal to Azure.</li>
  <li>The source IP address will switch from public to private, so the service‚Äôs firewall rules must reflect that.</li>
</ul>

<h2 id="private-endpoints">Private Endpoints</h2>

<ul>
  <li>Adds a NIC to a subnet with private IP (within the VNet CIDR block) pointing to a storage account and service.</li>
</ul>

<h2 id="the-reason-for-privatelink">The reason for PrivateLink</h2>

<p>From the results above, it may seem that if you have a Private Endpoint, you can bypass PrivateLink and just create an Azure Private DNS that points ‚ö™ test.blob.core.windows.net to üü¢ 10.0.1.4. It would work, but for that to happen the Private DNS zone would have to be at the <code class="language-plaintext highlighter-rouge">blob.core.windows.net</code>, and you‚Äôd then be expected to create a record for each Blob Storage that the VNet attached to the Private DNS zone would like to connect to. For example, if a machine also wanted to connect to <code class="language-plaintext highlighter-rouge">second-test.blob.core.windows.net</code>, it would be directed to resolve with the Private DNS zone, which would need to be manually configured. It is often more sensible to create a Private DNS zone at the <code class="language-plaintext highlighter-rouge">privatelink.blob.core.windows.net</code> level.</p>

<h2 id="on-premises-considerations">On-premises considerations</h2>

<ul>
  <li>Azure Private DNS zones are available globally, you can connect any VNet in the world to it for link resolution, but you cannot connect to it from on-premises.</li>
  <li>You can deploy a DNS forwarder in a VNet, then create a record in the local DNS (on-prem) to point any <code class="language-plaintext highlighter-rouge">privatelink.blob.core.windows.net</code> requests to the DNS forwarder, which can then talk to the Private DNS zone.</li>
  <li>Optionally, the records in the Private DNS zone can be recreated manually on local DNS.</li>
</ul>

<h2 id="privatelink-service">PrivateLink Service</h2>

<ul>
  <li>Useful in cases virtual networks cannot be peered (eg. 3rd party services, CIDR block overlap, etc).</li>
  <li>The host VNet deploys PLS internally in its own subnet. PLS will receive external requests and forward them to a Standard Load Balancer.</li>
  <li>The PLS deployment can have up to 8 IP addresses in the VNet, and it connects to a Front End IP address of the Load Balancer.</li>
</ul>

<h2 id="questions">Questions</h2>

<ul>
  <li>Is the VirtualNetworkServiceEndpoint a NIC with private IP?</li>
  <li>How does a Private Endpoint, which is a NIC with a private IP inside the VNet, talk to a Blob Storage instance without using the internet or Public IP?</li>
  <li>How does a private DNS zone get linked to a VNet? VNet‚Äôs route table?</li>
</ul>]]></content><author><name>Lucas</name></author><category term="networking" /><category term="azure" /><category term="azure" /><category term="cloud" /><category term="vnet" /><category term="app services" /><category term="dns" /><category term="private endpoint" /><category term="service endpoint" /><category term="private link" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Hosting a Safe Static Website on AWS (UI Version)</title><link href="http://localhost:4000/hosting-safe-static-website-aws-ui/" rel="alternate" type="text/html" title="Hosting a Safe Static Website on AWS (UI Version)" /><published>2021-11-27T00:00:00-08:00</published><updated>2021-11-27T00:00:00-08:00</updated><id>http://localhost:4000/hosting-safe-static-website-aws-ui</id><content type="html" xml:base="http://localhost:4000/hosting-safe-static-website-aws-ui/"><![CDATA[<p>There are many articles on how to host a static website using S3. Many more explain how to enable <em>https</em>, and plenty of them lay out how to use your own domain to host them. AWS‚Äô documentation alone covers all of it. In fact, the base for this article is in the documentation <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/website-hosting-custom-domain-walkthrough.html">pages</a>.</p>

<p>What makes this article worth writing (and hopefully reading) is the attention to the rationale behind every step, from bucket configuration to A record creation. The idea is to learn concepts rather than to practice following steps. Details on what buttons to click and where to find them can be found on the documentation.</p>

<p><strong>Disclaimer</strong>: some steps can or will incur costs. Many of the steps are optional in hosting a website, such as logging, having a custom domain, or using a CDN.</p>

<h2 id="01-register-custom-domain">01. Register custom domain</h2>

<p>Route 53 offers both domain registration and DNS hosting services. Domain registration means you pay (usually a yearly fee) for the domain name, eg. <em>domain-name.com</em>. AWS will use a partner registrar to register your information as the owner of that domain. The other thing it will do is keep track of the authoritative name servers for that domain, ie. the servers known to be in charge of knowing what IP to translate your domain name to.</p>

<p>That is where their DNS hosting service comes in. For a monthly fee, Route 53 provides you with servers that you can select to be your domain‚Äôs authoritative name servers. Usually those will be automatically generated by Route 53 and configured into your domain registration. They‚Äôre called <em>Hosted Zones</em> and come in sets of four servers.</p>

<h2 id="02-create-and-validate-certificate">02. Create and validate certificate</h2>

<p>You can do this step with the AWS Certificate Manager (ACM) service. When you create your certificate, it is a good idea to add both your apex domain name and a wildcard for all subdomains, eg. <em>mydomain.com</em> and <em>*.mydomain.com</em>, so that all your pages are covered by the certificate. The certificate is nothing more than proof that the person who owns the domain is providing the content. In order to earn the requested certificate from the certificate authority (CA), you need to prove that you control the domain in question.</p>

<p>The way to do that with ACM is easy: they provide you a subdomain name (eg. <em>_e7a8d1a9c01ec67ee57e0941f2b43a39</em>) and an AWS page that the subdomain should point to (eg. <em>_e87d0bf50c515881ed3a703a6216e409.wrnxprcrrv.acm-validations.aws.</em>) for each domain name in the certificate, which usually are the apex and the wildcard names mentioned above. All that is needed is to create the equivalent CNAME records. ACM has a button that automatically does the record creation. Within seconds, your certificate should be issued and ready to be used.</p>

<h2 id="03-create-and-configure-hosting-bucket">03. Create and configure hosting bucket</h2>

<p>It is strongly encouraged that the hosting bucket have the same name as the domain, specially if you‚Äôre not using CloudFront. The reason for that is that S3 buckets don‚Äôt have unique IP addresses. Their IP isn‚Äôt even static. It just uses an IP from a vast pool of AWS IP addresses. Therefore, when a request is made to a bucket, it arrives to one of the many public AWS IP addresses, and a <code class="language-plaintext highlighter-rouge">host</code> header (the domain name in the URL) is extracted, and AWS uses that value to locate the bucket. There is no extra logic behind that. So if AWS fields a request to a bucket website addressed to <em>jenkins.mydomain.com/status</em>, it will look for bucket <em>jenkins.mydomain.com</em>. If the request is for <em>my-example.s3-website.us-east-1.amazonaws.com/</em>, it will look for bucket <em>my-example</em>.</p>

<p>On the other hand, using CloudFront would work because it rewrites the <code class="language-plaintext highlighter-rouge">host</code> header. The CloudFront distribution has an <em>origins</em> setting where the bucket, ELB, or website serving the content can be listed. Another workaround to mismatching bucket and domain names is to set up a same-region EC2 reverse proxy. One workaround that does not work is to create a CNAME record from <em>mydomain.com</em> to <em>my-example.s3-website.us-east-1.amazonaws.com/</em>. The <em>mydomain.com</em> header is kept in the request through redirections, so when the request arrives to AWS for the server responsible for <em>my-example.s3-website.us-east-1.amazonaws.com/</em>, it won‚Äôt serve anything because it doesn‚Äôt have anything to serve for requests to <em>mydomain.com</em>.</p>

<p><strong>Important</strong>: when using CloudFront, website users contact the CDN and the CDN contacts the bucket for the files, so the bucket should block all public access. CloudFront has a feature called <em>origin access identities</em> that can be created and referred to in the bucket policy to give the service read access. If CloudFront is not being used, then public access needs to be allowed in the bucket permissions.</p>

<h2 id="04-create-and-configure-logging-bucket">04. Create and configure logging bucket</h2>

<p>The bucket should be in the same region as the hosting bucket for cost reasons. The main detail for this step is the permission configuration. By default, only the account owner can write to the bucket, so object-level ACLs are disabled. CloudFront can add a bucket policy entry to give itself permission to write logs, but you must manually enable ACLs for it to work.</p>

<h2 id="05-add-content-to-hosting-bucket">05. Add content to hosting bucket</h2>

<p>This part is highly depends on personal preferences and objectives. You can add a personal project using CSS and Javascript, you can add a whole <a href="https://jekyllrb.com/">Jekyll</a> blog, or you can simply add an index.html page for testing.</p>

<p>If you‚Äôre going the Jekyll route, or any other route where you manipulate your links, be very wary. In my case, changing the <code class="language-plaintext highlighter-rouge">permalink</code> of pages caused all requested pages other than the root page to not be found. But the worst part was that I did not get a <em>Page Not Found</em> error. Instead, I got an <em>Access Denied</em> error, making it much harder to find the problem. To summarize, I had to create a CloudFront Function that added <code class="language-plaintext highlighter-rouge">index.html</code> to all requests that ended with a <code class="language-plaintext highlighter-rouge">/</code>. You can read more about that <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/example-function-add-index.html">here</a>.</p>

<h2 id="06-create-and-configure-cdn-distribution">06. Create and configure CDN distribution</h2>

<p>By default, CloudFront only knows how to serve requests to its domain name, which should be something like <em><code class="language-plaintext highlighter-rouge">https://xxxxxxxxxxxxxx.cloudfront.net</code></em>. In order to let it know it is okay to serve requests that are originally sent to your custom domain (<em>mydomain.com</em>). Step 3 dives a bit deeper on this topic. Step 7 will not work if your alternate domain names are not properly set.</p>

<p>This step is where the certificate created in step 2 comes into play as well. You can cover your alternate domain names with your SSL certificate so that you can redirect all requests to HTTPS.</p>

<p>A quick note on origin domain: it is best practice to use the domain name version that includes the region of your bucket. The global domain of the bucket works for most regions, but not all.</p>

<h2 id="07-create-alias-records">07. Create alias records</h2>

<p>If you followed the previous steps correctly, this step should be simple. Go to the hosted zone of your custom domain and create an alias A record to your CloudFront distribution. If your CloudFront distribution doesn‚Äôt show up as an option when you create the record via Route 53, chances are that you did not properly configure your distribution‚Äôs alternate domain names to use your custom domain name. Due to reasons touched upon on steps 3 and 6, Route 53 is configured to not allow the creation of aliases to CloudFront distributions that do not have the domain (or subdomain) as an alternate domain name.</p>]]></content><author><name>Lucas</name></author><category term="networking" /><category term="aws" /><category term="aws" /><category term="cloud" /><category term="route 53" /><category term="cloudfront" /><category term="acm" /><category term="s3" /><category term="webhosting" /><category term="dns" /><summary type="html"><![CDATA[There are many articles on how to host a static website using S3. Many more explain how to enable https, and plenty of them lay out how to use your own domain to host them. AWS‚Äô documentation alone covers all of it. In fact, the base for this article is in the documentation pages.]]></summary></entry></feed>